
from gorgon_tools.magnetosphere import gorgon_import as imp

import numpy as np
import matplotlib.pyplot as plt




import os
import sys
import time


if len(sys.argv) < 2:
    print("No Run path given!")
    exit(1)

filepath = sys.argv[1]


#last line deletion
def delete_last_line():
    "Use this function to delete the last line in the STDOUT"

    #cursor up one line
    sys.stdout.write('\x1b[1A')

    #delete last line
    sys.stdout.write('\x1b[2K')







sim = imp.gorgon_sim(
	"/rds/general/user/avr24/projects/swimmr-sage/live/mheyns/benchmarking/runs/Run1"
)

index_of_value = np.where( sim.times == 18000 )[0][0]

# print(sim.times[index_of_value[0][0]])



sim.import_timestep(index_of_value)

# print(sim.arr)


sim.import_space("/rds/general/user/avr24/projects/swimmr-sage/live/mheyns/benchmarking/runs/Run1/MS/x00_Bvec_c-18000.pvtr")



B = sim.arr["Bvec_c"]
J = sim.arr["jvec"]
# V = sim.arr["vvec"]

X = sim.xc; Y = sim.yc; Z = sim.zc
# dX = sim.dx; dY = sim.dy; dZ = sim.dz


STEP = 1


with open(f"{filepath}/X.txt", "w") as f:
    f.write( f"{X.shape[0]//STEP}\n" )

    for ix in range(0, X.shape[0], STEP):
        f.write( str(X[ix]) )
        f.write( "," )

print("finished writing X")
print()

with open(f"{filepath}/Y.txt", "w") as f:
    f.write( f"{Y.shape[0]//STEP}\n" )

    for ix in range(0, Y.shape[0], STEP):
        f.write( str(Y[ix]) )
        f.write( "," )

print("finished writing Y")
print()

with open(f"{filepath}/Z.txt", "w") as f:
    f.write( f"{Z.shape[0]//STEP}\n" )

    for ix in range(0, Z.shape[0], STEP):
        f.write( str(Z[ix]) )
        f.write( "," )

print("finished writing Z")
print()





with open(f"{filepath}/B.txt", "w") as f:
    f.write( f"{B.shape[0]//STEP},{B.shape[1]//STEP},{B.shape[2]//STEP},{B.shape[3]}\n" )

    for ix in range(0, B.shape[0], STEP):
        print( f"{ round(100*ix/B.shape[0], 2) }%" )
        for iy in range(0, B.shape[1], STEP):
            for iz in range(0, B.shape[2], STEP):
                for i in range(3):
                    f.write( str(B[ix,iy,iz,i]) )
                    f.write( "," )
        delete_last_line()

print("finished writing B")
print()



with open(f"{filepath}/J.txt", "w") as f:
    f.write( f"{J.shape[0]//STEP},{J.shape[1]//STEP},{J.shape[2]//STEP},{J.shape[3]}\n" )
    for ix in range(0, J.shape[0], STEP):
        print( f"{ round(100*ix/J.shape[0], 2) }%" )
        for iy in range(0, J.shape[1], STEP):
            for iz in range(0, J.shape[2], STEP):
                for i in range(3):
                    f.write( str(J[ix,iy,iz,i]) )
                    f.write( "," )
        delete_last_line()

print("finished writing J")
print()



